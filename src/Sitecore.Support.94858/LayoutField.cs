// Generated by .NET Reflector from C:\inetpub\wwwroot\sc822\Website\bin\Sitecore.Kernel.dll
namespace Sitecore.Data.Fields
{
  using Sitecore;
  using Sitecore.Collections;
  using Sitecore.Data;
  using Sitecore.Data.Items;
  using Sitecore.Diagnostics;
  using Sitecore.Globalization;
  using Sitecore.Layouts;
  using Sitecore.Links;
  using Sitecore.Pipelines;
  using Sitecore.Pipelines.GetLayoutSourceFields;
  using Sitecore.Pipelines.ResolveRenderingDatasource;
  using Sitecore.Text;
  using Sitecore.Xml;
  using Sitecore.Xml.Patch;
  using System;
  using System.Collections;
  using System.Collections.Generic;
  using System.Linq;
  using global::System.Xml;
  using System.Xml.Linq;

  public class LayoutField : CustomField
  {
    private readonly System.Xml.XmlDocument data;
    public const string EmptyValue = "<r />";

    public LayoutField(Field innerField) : base(innerField)
    {
      Assert.ArgumentNotNull(innerField, "innerField");
      this.data = this.LoadData();
    }

    public LayoutField(Sitecore.Data.Items.Item item) : this(item.Fields[FieldIDs.FinalLayoutField])
    {
    }

    public LayoutField(Field innerField, string runtimeValue) : base(innerField, runtimeValue)
    {
      Assert.ArgumentNotNull(innerField, "innerField");
      Assert.ArgumentNotNullOrEmpty(runtimeValue, "runtimeValue");
      this.data = this.LoadData();
    }

    [Obsolete("Use GetLayoutSourceFieldsPipeline.Run(GetLayoutSourceFieldsArgs args) method instead.")]
    private static List<string> DoGetFieldValue(Field field)
    {
      Sitecore.Data.Items.Item item = field.Item;
      FieldCollection fields = item.Fields;
      IEnumerable<Lazy<string>> source = new Lazy<string>[] { new Lazy<string>(() => fields[FieldIDs.FinalLayoutField].GetValue(false, false) ?? fields[FieldIDs.FinalLayoutField].GetInheritedValue(false)), new Lazy<string>(() => fields[FieldIDs.LayoutField].GetValue(false, false) ?? fields[FieldIDs.LayoutField].GetInheritedValue(false)), new Lazy<string>(() => fields[FieldIDs.FinalLayoutField].GetStandardValue()), new Lazy<string>(() => fields[FieldIDs.LayoutField].GetStandardValue()) };
      bool flag = item.Name == "__Standard Values";
      bool flag2 = field.ID == FieldIDs.LayoutField;
      if (flag && flag2)
      {
        source = source.Skip<Lazy<string>>(3);
      }
      else if (flag)
      {
        source = source.Skip<Lazy<string>>(2);
      }
      else if (flag2)
      {
        source = source.Skip<Lazy<string>>(1);
      }
      return (from x in source select x.Value).ToList<string>();
    }

    public static ID ExtractLayoutID(System.Xml.XmlNode deviceNode)
    {
      Assert.ArgumentNotNull(deviceNode, "deviceNode");
      string attribute = XmlUtil.GetAttribute("l", deviceNode);
      if ((attribute.Length > 0) && ID.IsID(attribute))
      {
        return ID.Parse(attribute);
      }
      return ID.Null;
    }

    public static RenderingReference[] ExtractReferences(System.Xml.XmlNode deviceNode, Language language, Database database)
    {
      Assert.ArgumentNotNull(deviceNode, "deviceNode");
      Assert.ArgumentNotNull(language, "language");
      Assert.ArgumentNotNull(database, "database");
      System.Xml.XmlNodeList list = deviceNode.SelectNodes("r");
      Assert.IsNotNull(list, "nodes");
      RenderingReference[] referenceArray = new RenderingReference[list.Count];
      for (int i = 0; i < list.Count; i++)
      {
        referenceArray[i] = new RenderingReference(list[i], language, database);
      }
      return referenceArray;
    }

    public System.Xml.XmlNode GetDeviceNode(DeviceItem device)
    {
      if (device != null)
      {
        return this.Data.DocumentElement.SelectSingleNode("d[@id='" + device.ID + "']");
      }
      return null;
    }

    public static string GetFieldValue(Field field)
    {
      Assert.ArgumentNotNull(field, "field");
      Assert.IsTrue((field.ID == FieldIDs.LayoutField) || (field.ID == FieldIDs.FinalLayoutField), "The field is not a layout/renderings field");
      GetLayoutSourceFieldsArgs args = new GetLayoutSourceFieldsArgs(field);
      bool flag = GetLayoutSourceFieldsPipeline.Run(args);
      List<string> list = new List<string>();
      if (flag)
      {
        list.AddRange(from fieldValue in args.FieldValuesSource select fieldValue.GetValue(false, false) ?? (fieldValue.GetInheritedValue(false) ?? fieldValue.GetValue(false, false, true, false, false)));
        list.AddRange(from fieldValue in args.StandardValuesSource select fieldValue.GetStandardValue());
      }
      else
      {
        list = DoGetFieldValue(field);
      }
      System.Collections.Generic.Stack<string> source = new System.Collections.Generic.Stack<string>();
      string str = null;
      foreach (string str2 in list)
      {
        if (!string.IsNullOrWhiteSpace(str2))
        {
          if (XmlPatchUtils.IsXmlPatch(str2))
          {
            source.Push(str2);
          }
          else
          {
            str = str2;
            break;
          }
        }
      }
      if (string.IsNullOrWhiteSpace(str))
      {
        return string.Empty;
      }
      return source.Aggregate<string, string>(str, new Func<string, string, string>(XmlDeltas.ApplyDelta));
    }

    public ID GetLayoutID(DeviceItem device)
    {
      Assert.ArgumentNotNull(device, "device");
      System.Xml.XmlNode deviceNode = this.GetDeviceNode(device);
      if (deviceNode != null)
      {
        return ExtractLayoutID(deviceNode);
      }
      return ID.Null;
    }

    private RenderingParametersFieldCollection GetParametersFields(Sitecore.Data.Items.Item layoutItem, string renderingParameters)
    {
      RenderingParametersFieldCollection fields;
      UrlString parameters = new UrlString(renderingParameters);
      RenderingParametersFieldCollection.TryParse(layoutItem, parameters, out fields);
      return fields;
    }

    public RenderingReference[] GetReferences(DeviceItem device)
    {
      Assert.ArgumentNotNull(device, "device");
      System.Xml.XmlNode deviceNode = this.GetDeviceNode(device);
      if (deviceNode != null)
      {
        return ExtractReferences(deviceNode, base.InnerField.Language, base.InnerField.Database);
      }
      return null;
    }

    protected override string GetValue()
    {
      if (base._hasRuntimeValue)
      {
        return base._runtimeValue;
      }
      return GetFieldValue(base._innerField);
    }

    private System.Xml.XmlDocument LoadData()
    {
      string str = base.Value;
      if (!string.IsNullOrEmpty(str))
      {
        return XmlUtil.LoadXml(str);
      }
      return XmlUtil.LoadXml("<r/>");
    }

    public static implicit operator LayoutField(Field field)
    {
      if (field != null)
      {
        return new LayoutField(field);
      }
      return null;
    }

    public override void Relink(ItemLink itemLink, Sitecore.Data.Items.Item newLink)
    {
      Assert.ArgumentNotNull(itemLink, "itemLink");
      Assert.ArgumentNotNull(newLink, "newLink");
      string str = base.Value;
      if (!string.IsNullOrEmpty(str))
      {
        LayoutDefinition definition = LayoutDefinition.Parse(str);
        ArrayList devices = definition.Devices;
        if (devices != null)
        {
          string b = itemLink.TargetItemID.ToString();
          string str3 = newLink.ID.ToString();
          for (int i = devices.Count - 1; i >= 0; i--)
          {
            DeviceDefinition definition2 = devices[i] as DeviceDefinition;
            if (definition2 != null)
            {
              if (definition2.ID == b)
              {
                definition2.ID = str3;
              }
              else if (definition2.Layout == b)
              {
                definition2.Layout = str3;
              }
              else
              {
                if (definition2.Placeholders != null)
                {
                  string targetPath = itemLink.TargetPath;
                  bool flag = false;
                  for (int j = definition2.Placeholders.Count - 1; j >= 0; j--)
                  {
                    PlaceholderDefinition definition3 = definition2.Placeholders[j] as PlaceholderDefinition;
                    if ((definition3 != null) && (string.Equals(definition3.MetaDataItemId, targetPath, StringComparison.InvariantCultureIgnoreCase) || string.Equals(definition3.MetaDataItemId, b, StringComparison.InvariantCultureIgnoreCase)))
                    {
                      definition3.MetaDataItemId = newLink.Paths.FullPath;
                      flag = true;
                    }
                  }
                  if (flag)
                  {
                    continue;
                  }
                }
                if (definition2.Renderings != null)
                {
                  for (int k = definition2.Renderings.Count - 1; k >= 0; k--)
                  {
                    RenderingDefinition definition4 = definition2.Renderings[k] as RenderingDefinition;
                    if (definition4 != null)
                    {
                      if (definition4.ItemID == b)
                      {
                        definition4.ItemID = str3;
                      }
                      if (definition4.Datasource == b)
                      {
                        definition4.Datasource = str3;
                      }
                      if (definition4.Datasource == itemLink.TargetPath)
                      {
                        definition4.Datasource = newLink.Paths.FullPath;
                      }
                      if (!string.IsNullOrEmpty(definition4.Parameters))
                      {
                        Sitecore.Data.Items.Item layoutItem = base.InnerField.Database.GetItem(definition4.ItemID);
                        if (layoutItem == null)
                        {
                          continue;
                        }
                        RenderingParametersFieldCollection parametersFields = this.GetParametersFields(layoutItem, definition4.Parameters);
                        foreach (CustomField field in parametersFields.Values)
                        {
                          if (!string.IsNullOrEmpty(field.Value))
                          {
                            field.Relink(itemLink, newLink);
                          }
                        }
                        definition4.Parameters = parametersFields.GetParameters().ToString();
                      }
                      if (definition4.Rules != null)
                      {
                        RulesField field2 = new RulesField(base.InnerField, definition4.Rules.ToString());
                        field2.Relink(itemLink, newLink);
                        definition4.Rules = XElement.Parse(field2.Value);
                      }
                    }
                  }
                }
              }
            }
          }
          base.Value = definition.ToXml();
        }
      }
    }

    public override void RemoveLink(ItemLink itemLink)
    {
      Assert.ArgumentNotNull(itemLink, "itemLink");
      string str = base.Value;
      if (!string.IsNullOrEmpty(str))
      {
        LayoutDefinition definition = LayoutDefinition.Parse(str);
        ArrayList devices = definition.Devices;
        if (devices != null)
        {
          string b = itemLink.TargetItemID.ToString();
          for (int i = devices.Count - 1; i >= 0; i--)
          {
            DeviceDefinition definition2 = devices[i] as DeviceDefinition;
            if (definition2 != null)
            {
              if (definition2.ID == b)
              {
                devices.Remove(definition2);
              }
              else if (definition2.Layout == b)
              {
                definition2.Layout = null;
              }
              else
              {
                if (definition2.Placeholders != null)
                {
                  string targetPath = itemLink.TargetPath;
                  bool flag = false;
                  for (int j = definition2.Placeholders.Count - 1; j >= 0; j--)
                  {
                    PlaceholderDefinition definition3 = definition2.Placeholders[j] as PlaceholderDefinition;
                    if ((definition3 != null) && (string.Equals(definition3.MetaDataItemId, targetPath, StringComparison.InvariantCultureIgnoreCase) || string.Equals(definition3.MetaDataItemId, b, StringComparison.InvariantCultureIgnoreCase)))
                    {
                      definition2.Placeholders.Remove(definition3);
                      flag = true;
                    }
                  }
                  if (flag)
                  {
                    continue;
                  }
                }
                if (definition2.Renderings != null)
                {
                  for (int k = definition2.Renderings.Count - 1; k >= 0; k--)
                  {
                    RenderingDefinition definition4 = definition2.Renderings[k] as RenderingDefinition;
                    if (definition4 != null)
                    {
                      if (definition4.Datasource == itemLink.TargetPath)
                      {
                        definition4.Datasource = string.Empty;
                      }
                      if (definition4.ItemID == b)
                      {
                        definition2.Renderings.Remove(definition4);
                      }
                      if (definition4.Datasource == b)
                      {
                        definition4.Datasource = string.Empty;
                      }
                      if (!string.IsNullOrEmpty(definition4.Parameters))
                      {
                        Sitecore.Data.Items.Item layoutItem = base.InnerField.Database.GetItem(definition4.ItemID);
                        if (layoutItem == null)
                        {
                          continue;
                        }
                        RenderingParametersFieldCollection parametersFields = this.GetParametersFields(layoutItem, definition4.Parameters);
                        foreach (CustomField field in parametersFields.Values)
                        {
                          if (!string.IsNullOrEmpty(field.Value))
                          {
                            field.RemoveLink(itemLink);
                          }
                        }
                        definition4.Parameters = parametersFields.GetParameters().ToString();
                      }
                      if (definition4.Rules != null)
                      {
                        RulesField field2 = new RulesField(base.InnerField, definition4.Rules.ToString());
                        field2.RemoveLink(itemLink);
                        definition4.Rules = XElement.Parse(field2.Value);
                      }
                    }
                  }
                }
              }
            }
          }
          base.Value = definition.ToXml();
        }
      }
    }

    public static void SetFieldValue(Field field, string value)
    {
      Field field2;
      Assert.ArgumentNotNull(field, "field");
      Assert.ArgumentNotNull(value, "value");
      Assert.IsTrue((field.ID == FieldIDs.LayoutField) || (field.ID == FieldIDs.FinalLayoutField), "The field is not a layout/renderings field");
      string fieldValue = null;
      bool flag = field.Item.Name == "__Standard Values";
      bool flag2 = field.ID == FieldIDs.LayoutField;
      if (flag && flag2)
      {
        field2 = null;
      }
      else if (flag)
      {
        field2 = field.Item.Fields[FieldIDs.LayoutField];
      }
      else if (flag2)
      {
        TemplateItem template = field.Item.Template;
        field2 = ((template != null) && (template.StandardValues != null)) ? template.StandardValues.Fields[FieldIDs.FinalLayoutField] : null;
      }
      else
      {
        field2 = field.Item.Fields[FieldIDs.LayoutField];
      }
      if (field2 != null)
      {
        fieldValue = GetFieldValue(field2);
      }
      if (XmlUtil.XmlStringsAreEqual(value, fieldValue))
      {
        field.Reset();
      }
      else if (!string.IsNullOrWhiteSpace(fieldValue))
      {
        field.Value = XmlDeltas.GetDelta(value, fieldValue);
      }
      else
      {
        field.Value = value;
      }
    }

    public static void SetFieldValue(Field field, string value, string baseValue)
    {
      Assert.ArgumentNotNull(field, "field");
      Assert.ArgumentNotNull(value, "value");
      Assert.ArgumentNotNull(baseValue, "baseValue");
      Assert.IsTrue((field.ID == FieldIDs.LayoutField) || (field.ID == FieldIDs.FinalLayoutField), "The field is not a layout/renderings field");
      if (XmlUtil.XmlStringsAreEqual(value, baseValue))
      {
        field.Reset();
      }
      else
      {
        string delta;
        if (!string.IsNullOrWhiteSpace(baseValue))
        {
          delta = XmlDeltas.GetDelta(value, baseValue);
        }
        else
        {
          delta = value;
        }
        if (!XmlUtil.XmlStringsAreEqual(XmlDeltas.ApplyDelta(baseValue, field.Value), XmlDeltas.ApplyDelta(baseValue, delta)))
        {
          field.Value = delta;
        }
      }
    }

    internal void SetLayoutHack(string value)
    {
      Assert.ArgumentNotNull(value, "value");
      System.Xml.XmlNodeList list = this.Data.DocumentElement.SelectNodes("d");
      Assert.IsNotNull(list, "nodes");
      if (list.Count > 0)
      {
        foreach (System.Xml.XmlNode node in list)
        {
          XmlUtil.SetAttribute("l", value, node);
        }
        base.Value = this.Data.OuterXml;
      }
    }

    protected override void SetValue(string value)
    {
      Assert.ArgumentNotNull(value, "value");
      if (base._hasRuntimeValue)
      {
        base._runtimeValue = value;
      }
      SetFieldValue(base._innerField, value);
    }

    public override void ValidateLinks(LinksValidationResult result)
    {
      Assert.ArgumentNotNull(result, "result");
      string str = base.Value;
      if (!string.IsNullOrEmpty(str))
      {
        ArrayList devices = LayoutDefinition.Parse(str).Devices;
        if (devices != null)
        {
          foreach (DeviceDefinition definition2 in devices)
          {
            if (!string.IsNullOrEmpty(definition2.ID))
            {
              Sitecore.Data.Items.Item targetItem = base.InnerField.Database.GetItem(definition2.ID);
              if (targetItem != null)
              {
                result.AddValidLink(targetItem, definition2.ID);
              }
              else
              {
                result.AddBrokenLink(definition2.ID);
              }
            }
            if (!string.IsNullOrEmpty(definition2.Layout))
            {
              Sitecore.Data.Items.Item item = base.InnerField.Database.GetItem(definition2.Layout);
              if (item != null)
              {
                result.AddValidLink(item, definition2.Layout);
              }
              else
              {
                result.AddBrokenLink(definition2.Layout);
              }
            }
            this.ValidatePlaceholderSettings(result, definition2);
            if (definition2.Renderings != null)
            {
              foreach (RenderingDefinition definition3 in definition2.Renderings)
              {
                if (definition3.ItemID != null)
                {
                  Sitecore.Data.Items.Item item3 = base.InnerField.Database.GetItem(definition3.ItemID);
                  if (item3 != null)
                  {
                    result.AddValidLink(item3, definition3.ItemID);
                  }
                  else
                  {
                    result.AddBrokenLink(definition3.ItemID);
                  }
                  string datasource = definition3.Datasource;
                  if (!string.IsNullOrEmpty(datasource))
                  {
                    using (new ContextItemSwitcher(base.InnerField.Item))
                    {
                      ResolveRenderingDatasourceArgs args = new ResolveRenderingDatasourceArgs(datasource);
                      CorePipeline.Run("resolveRenderingDatasource", args, false);
                      datasource = args.Datasource;
                    }
                    Sitecore.Data.Items.Item item4 = base.InnerField.Database.GetItem(datasource);
                    if (item4 != null)
                    {
                      result.AddValidLink(item4, datasource);
                    }
                    else if (!datasource.Contains(":"))
                    {
                      result.AddBrokenLink(datasource);
                    }
                  }
                  string multiVariateTest = definition3.MultiVariateTest;
                  if (!string.IsNullOrEmpty(multiVariateTest))
                  {
                    Sitecore.Data.Items.Item item5 = base.InnerField.Database.GetItem(multiVariateTest);
                    if (item5 != null)
                    {
                      result.AddValidLink(item5, multiVariateTest);
                    }
                    else
                    {
                      result.AddBrokenLink(multiVariateTest);
                    }
                  }
                  string personalizationTest = definition3.PersonalizationTest;
                  if (!string.IsNullOrEmpty(personalizationTest))
                  {
                    Sitecore.Data.Items.Item item6 = base.InnerField.Database.GetItem(personalizationTest);
                    if (item6 != null)
                    {
                      result.AddValidLink(item6, personalizationTest);
                    }
                    else
                    {
                      result.AddBrokenLink(personalizationTest);
                    }
                  }
                  if ((item3 != null) && !string.IsNullOrEmpty(definition3.Parameters))
                  {
                    foreach (CustomField field in this.GetParametersFields(item3, definition3.Parameters).Values)
                    {
                      field.ValidateLinks(result);
                    }
                  }
                  if (definition3.Rules != null)
                  {
                    new RulesField(base.InnerField, definition3.Rules.ToString()).ValidateLinks(result);
                  }
                }
              }
            }
          }
        }
      }
    }

    protected virtual void ValidatePlaceholderSettings(LinksValidationResult result, DeviceDefinition device)
    {
      Assert.ArgumentNotNull(result, "result");
      Assert.ArgumentNotNull(device, "device");
      ArrayList placeholders = device.Placeholders;
      if (placeholders != null)
      {
        foreach (PlaceholderDefinition definition in placeholders)
        {
          if ((definition != null) && !string.IsNullOrEmpty(definition.MetaDataItemId))
          {
            Sitecore.Data.Items.Item targetItem = base.InnerField.Database.GetItem(definition.MetaDataItemId);
            if (targetItem != null)
            {
              result.AddValidLink(targetItem, definition.MetaDataItemId);
            }
            else
            {
              result.AddBrokenLink(definition.MetaDataItemId);
            }
          }
        }
      }
    }

    public System.Xml.XmlDocument Data
    {
      get
      {
        return this.data;
      }
    }
  }
}
